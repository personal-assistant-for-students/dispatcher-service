import telebot
from telebot import types
import requests
from datetime import datetime
from telebot_calendar import Calendar, CallbackData, RUSSIAN_LANGUAGE

TOKEN = "YOUR_TOKEN"
bot = telebot.TeleBot(TOKEN)

HOST = "http://127.0.0.1:5000"

TASK_SERVICE_URL = HOST + "/tasks"
TASK_UPDATE_URL = TASK_SERVICE_URL + "/{task_id}"

# calendar and CallbackData for managing choosing date
calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_callback = CallbackData("calendar", "action", "year", "month", "day")

# dictionary for temp storing new task
task_creation_data = {}


def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("/joka", "/new", "/tasks")
    return keyboard


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    bot.reply_to(message,
                 "–ü—Ä–∏–≤–µ—Ç {}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?".format(user_name),
                 reply_markup=create_main_keyboard())


@bot.message_handler(commands=['joka'])
def handle_start(message):
    bot.reply_to(message, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è {}".format(message.from_user.full_name))


@bot.message_handler(commands=['new'])
def start_task_creation(message):
    cancel_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(cancel_button)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_task_creation)


def handle_task_creation(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏':
        bot.send_message(message.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_main_keyboard())
        return

    task_creation_data['title'] = message.text
    now = datetime.now()
    bot.send_message(message.chat.id,
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:",
                     reply_markup=calendar.create_calendar(name=calendar_callback.prefix,
                                                           year=now.year,
                                                           month=now.month
                                                           ))


@bot.callback_query_handler(func=lambda call: call.data.startswith(calendar_callback.prefix))
def handle_calendar(call):
    name, action, year, month, day = call.data.split(calendar_callback.sep)
    date = calendar.calendar_query_handler(bot=bot,
                                           call=call,
                                           name=name,
                                           action=action,
                                           year=year,
                                           month=month,
                                           day=day)
    if action == "DAY":
        task_creation_data['deadline'] = date.strftime("%Y-%m-%d")
        msg = bot.send_message(call.message.chat.id, "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ:")
        bot.register_next_step_handler(msg, set_task_description)
    elif action == "CANCEL":
        bot.send_message(call.message.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_main_keyboard())


def set_task_description(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏':
        bot.send_message(message.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_main_keyboard())
        return
    task_creation_data['description'] = message.text

    # prepare new task
    task_data = {
        'user_id': message.from_user.id,
        'title': task_creation_data['title'],
        'content': task_creation_data['description'],
        'deadline': task_creation_data['deadline']
    }

    # send new task to task manager
    try:
        response = requests.post(TASK_SERVICE_URL, json=task_data)
        if response.status_code == 201:
            bot.send_message(message.chat.id,
                             f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task_creation_data['title']}\n–î–µ–¥–ª–∞–π–Ω: {task_creation_data['deadline']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task_creation_data['description']}",
                             reply_markup=create_main_keyboard())
        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.",
                             reply_markup=create_main_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_main_keyboard())

    # temp task can be clear
    task_creation_data.clear()


@bot.message_handler(commands=['tasks'])
def handle_tasks(message):
    user_id = message.from_user.id
    try:
        response = requests.get(TASK_SERVICE_URL, json=user_id)
        if response.status_code == 200:
            tasks = response.json()
            if len(tasks) == 0:
                bot.reply_to(message, "–î–µ–ª–∞—Ç—å –±—ã–ª–æ –Ω–µ—á–µ–≥–æ –¥–µ–ª–æ –±—ã–ª–æ –≤–µ—á–µ—Ä–æ–º, —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç –∫–æ—Ä–æ—á–µ")
            else:
                # sorting by deadline
                tasks.sort(key=lambda x: datetime.strptime(x['deadline'], '%Y-%m-%d'))
                markup = types.InlineKeyboardMarkup()
                for task in tasks:
                    additional_status_emoji = get_additional_status_emoji(task['additional_status'])
                    status_emoji = get_status_emoji(task['status'])
                    task_info = f"{status_emoji} {additional_status_emoji} {task['title']} - {task['status']}"
                    task_button = types.InlineKeyboardButton(task_info, callback_data=f"task_{task['id']}")
                    markup.add(task_button)
                bot.reply_to(message, "–í–æ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –¥–µ–¥–ª–∞–π–Ω—É —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:",
                             reply_markup=markup)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")


def get_additional_status_emoji(additional_status):
    if additional_status == "–°–≥–æ—Ä–µ–ª":
        return "üíÄ"
    elif additional_status == "–ê–¥–∏—â–µ":
        return "üî•"
    if additional_status == "–ì–æ—Ä–∏—Ç":
        return "ü§¨"
    elif additional_status == "–¢–µ–ø–ª—ã–π":
        return "ü•µ"
    else:
        return "ü•∂"


def get_status_emoji(status):
    if status == "–°–¥–µ–ª–∞—Ç—å":
        return "üîò"
    elif status == "–î–µ–ª–∞—é":
        return "üü¢"
    else:
        return ""


@bot.callback_query_handler(func=lambda call: call.data.startswith("task_"))
def handle_get_task_from_button_list(call):  # get task from the list
    task_id = call.data.split("_")[1]
    try:
        response = requests.get(f"{TASK_SERVICE_URL}/{task_id}", json=call.from_user.id)
        if response.status_code == 200:
            task = response.json()

            # creation layout for buttons
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"status_{task_id}_–í—ã–ø–æ–ª–Ω–µ–Ω–æ"))
            markup.add(types.InlineKeyboardButton("–î–µ–ª–∞—é", callback_data=f"status_{task_id}_–î–µ–ª–∞—é"))
            markup.add(types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å", callback_data=f"status_{task_id}_–°–¥–µ–ª–∞—Ç—å"))

            bot.send_message(
                call.message.chat.id,
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n–î–µ–¥–ª–∞–π–Ω: {task['deadline']}\n–ß—Ç–æ: {task['content']}\n–°—Ç–∞—Ç—É—Å: {task['status']}\n–î–æ–ø. —Å—Ç–∞—Ç—É—Å: {task['additional_status']}",
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("status_"))
def handle_status_change(call):
    _, task_id, new_status = call.data.split("_")
    update_url = TASK_UPDATE_URL.format(task_id=task_id)
    user_id = call.from_user.id
    updated_data = {
        "user_id": user_id,
        "status": new_status
    }

    try:
        response = requests.put(update_url, json=updated_data)

        if response.status_code == 200:
            task_response = requests.get(f"{TASK_SERVICE_URL}/{task_id}", json=call.from_user.id)

            if task_response.status_code == 200:
                task = task_response.json()
                updated_task_info = f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n–î–µ–¥–ª–∞–π–Ω: {task['deadline']}\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {task['status']}"
                bot.send_message(call.message.chat.id, updated_task_info)
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.")
        else:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text.startswith("/update"))
def update_task(message):
    data = message.text.split()
    task_id = data[1]
    updated_data = {
        "user_id": message.from_user.id,
        "status": data[4]
    }
    try:
        response = requests.put(TASK_UPDATE_URL.format(task_id=task_id), json=updated_data)
        if response.status_code == 200:
            bot.reply_to(message, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            handle_tasks(message)  # get new list of tasks
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")


def main():
    bot.polling(none_stop=True)


if __name__ == '__main__':
    main()
